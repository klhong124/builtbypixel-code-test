---
description:
globs:
alwaysApply: true
---
## Core Chakra UI Rules

### 1. Theme Usage

- **Always use the custom theme**: Import and use the theme from `app/theme.ts`
- **Use semantic colours**: Prefer semantic colour tokens like `brand.500`, `gray.500`, `success`, `warning` over hardcoded hex values
- **Custom colours available**: `success`, `warning`, plus standard Chakra colours

---

### 2. Component Import Rules

```ts
// ‚úÖ Correct - Import from @chakra-ui/react
import { Box, Button, Text, Heading } from "@chakra-ui/react";

// ‚ùå Avoid - Don't import from individual packages
import Box from "@chakra-ui/box";
```

---

### 3. Layout Components

- **Use Box for containers**: Primary layout component for divs
- **Use Flex for flexbox layouts**
- **Use Grid for CSS Grid**
- **Use Center for centering**

---

### 4. Typography

- **Use Heading for titles**: With appropriate `as` prop (`h1`, `h2`, etc.)
- **Use Text for body text**: With semantic colour tokens
- **Font family**: Inter is configured as the default font

---

### 5. Button Guidelines

- **Default size**: Buttons default to `sm`
- **Available variants**: `outline`, `dashed` (custom), plus Chakra standard
- **Use with next/link**: `as={Link}` for navigation

---

### 6. Responsive Design

- **Use responsive arrays**: `[base, md, lg]`
- **Mobile-first**: Start styles for mobile, override up

---

### 7. Spacing and Sizing

- **Use theme spacing**: `p={4}`, `gap={3}`, `m={2}`, etc.
- **Use viewport units**: `100dvh`, `100vw` as needed

---

### 8. Styling Patterns

- **Use style props**: Instead of `className` or inline CSS
- **Use pseudo selectors**: `_hover`, `_focus`, `_dark`, etc.
- **Use `sx`**: For complex custom styles

---

## Framer Motion Integration

### 9. Animation Guidelines

- Use Framer Motion `motion` components with Chakra UI's `as` prop
- Combine with Chakra using `as={motion.div}`, `as={motion.button}`, etc.
- Animate `opacity` and `transform` only
- **Important**: Chakra props take precedence over Framer Motion props with the same name

---

### 10. Motion Component Patterns with `as` Prop

```tsx
import { Box } from '@chakra-ui/react'
import { motion } from 'framer-motion'

// ‚úÖ Correct - Using as prop to combine Chakra UI with Framer Motion
<Box
  as={motion.div}
  height='40px'
  width='40px'
  bg='orange.400'
  drag='x'
  dragConstraints={{ left: -100, right: 100 }}
  whileHover={{ scale: 1.1 }}
  whileTap={{ scale: 0.9 }}
  transition='0.5s linear'  // Use Chakra's transition prop
>
  Content
</Box>
```

---

### 11. Transition Prop Conflicts Resolution

**‚ö†Ô∏è Critical**: Chakra UI props with the same name as Framer Motion props take precedence.

```tsx
// ‚úÖ Works - Chakra transition prop
<Box
  as={motion.div}
  transition='0.5s linear'  // Chakra UI transition
  whileHover={{ scale: 1.1 }}
>
  Content
</Box>

// ‚ùå Doesn't work - Framer Motion transition conflicts with Chakra
<Box
  as={motion.div}
  transition={{ duration: 0.5, ease: "linear" }}  // Conflicts with Chakra
  whileHover={{ scale: 1.1 }}
>
  Content
</Box>
```

**Solution**: Use Chakra UI's transition prop for CSS transitions, Framer Motion props for animations.

---

### 12. Dark Mode

- Use `_dark` pseudo selector for theme adjustments

---

### 13. Accessibility

- Use semantic HTML and ARIA attributes
- Ensure strong contrast
- Respect `prefers-reduced-motion`

---

## ‚úÖ Common Patterns

1. Use spacing and sizing tokens from the theme
2. Use semantic colour tokens
3. Build mobile-first and extend up
4. Use reusable components
5. Apply consistent animation timing

---

## üö´ Avoid

- ‚ùå Hardcoded hex colours
- ‚ùå Using `className` with Chakra
- ‚ùå Inline CSS instead of style props
- ‚ùå Animating layout properties
- ‚ùå Overstacking Glass components
- ‚ùå Ignoring accessibility controls

---

